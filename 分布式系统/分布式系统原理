（1）分布式系统CAP理论：
CAP定理在发展中存在过两个版本，我们以第二个版本为准：
在一个分布式系统中（指互相连接并共享数据的节点集合）中，当涉及到读写操作时，只能保证一致性（Consistence）、可用性（Availability）、分区容错性（Partition Tolerance）三者中的两个，另外一个必须被牺牲

CAP理论的前提
CAP关注的是多节点互连场景下进行数据读写操作，相互连接并且共享数据的多节点集合构成的分布式系统是CAP理论的前提

两个关键的场景限制：
1.互相连接并共享数据的节点集合；
2.数据读写操作；

所以，Memcached集群这类的分布式系统并不在CAP理论讨论的范围，而像MySQL集群就是互连和数据共享复制，因此 MySQL 集群是属于 CAP 理论讨论的对象

C（consistency）：一致性意思就是写操作之后进行读操作，无论在哪个节点，都需要返回写操作的值
A（availability）：可用性，当分布式系统中某个节点出现故障（或问题）的时候，非故障的节点在合理的时间内返回合理（非错误和超时）的结果。比如某个请求合理的响应时间是在1秒内返回，超出1秒后返回就是不合理；再比如某请求的响应结果正常的错误码是200，100，实际响应结果是404就是不合理。可用性还可细分为服务可用性和数据可用性，服务可用性指节点故障其他节点能够响应请求，数据可用性（可靠性）指节点故障不会丢失数据
P（patition-tolerancy）：分区容错性是指当发生网络分区（分割），系统可以继续履行职责。网络分区现象可能是丢包、阻塞或者连接中断，当系统出现网络故障，导致整个网络被分成了互不连通的区域，这就叫作分区。一旦出现分区，那么问题区域内的节点就没法和其他区域的节点实现数据的互访问，所以预防此类问题的最好办法是每个节点把数据复制到其他区域内的节点，这样即使出现分区，也能访问其他复制区域内节点上的数据，这就是分区容错性

总的来说，就是复制的数据节点越多，分区容错性越高，但数据一致性越难保证。为了保证数据一致性，又会带来可用性的问题

因为探讨的是分布式环境，网络情况不可能是百分百可靠，所以P是必须满足的一个选项

CP or  AP
假设有A、B两个节点，前一刻两个节点里的数据都是x，后一刻A节点写入了最新数据y，这时A节点把数据y同步到B节点的时候发生了网络分区
1.如果要保证Consistency，那么客户端在请求B节点数据的时候，应该提示系统发生了错误，从而舍弃了Availability
2.如果要保证Availability，那么客户端在请求B节点数据的时候，直接返回保存的数据即可，但这样也就舍弃了Consistency
由此论证在分布式系统（相互连接并且共享数据的多节点集合）环境下，CAP同时只能满足CP或者AP

二将军问题
二将军问题是网络领域的一个经典问题，用于表达计算机网络中互联协议设计的微妙性和复杂性
二将军问题的简化版本：
一支白军被围困在一个山谷中，山谷的左右两侧是蓝军。困在山谷中的白军人数多于山谷两侧的任意一支蓝军，而少于两支蓝军的之和。若一支蓝军对白军单独发起进攻，则必败无疑；但若两支蓝军同时发起进攻，则可取胜。两只蓝军的总指挥位于山谷左侧，他希望两支蓝军同时发起进攻，这样就要把命令传到山谷右侧的蓝军，以告知发起进攻的具体时间。假设他们只能派遣士兵穿越白军所在的山谷（唯一的通信信道）来传递消息，那么在穿越山谷时，士兵有可能被俘虏

只有当送信士兵成功往返后，总指挥才能确认这场战争的胜利（上方图）。现在问题来了，派遣出去送信的士兵没有回来，则左侧蓝军中的总指挥能不能决定按命令中约定的时间发起进攻？答案是不确定，派遣出去送信的士兵没有回来，他可能遇到两种状况：
* 命令还没送达就被俘虏了（中间图），这时候右侧蓝军根本不知道要何时进攻；
* 命令送达，但返回途中被俘虏了（下方图），这时候右侧蓝军知道要何时进攻，但左侧蓝军不知道右侧蓝军是否知晓进攻时间；

类似的问题在计算机网络中普遍存在，例如发送者给接受者发送一个 HTTP 请求，或者 MySQL 客户端向 MySQL 服务器发送一条插入语句，然后超时了没有得到响应。请问服务器是写入成功了还是失败了？答案是不确定，有以下几种情况：
* 可能请求由于网络故障根本没有送到服务器，因此写入失败；
* 可能服务器收到了，也写入成功了，但是向客户端发送响应前服务器宕机了；
* 可能服务器收到了，也写入成功了，也向客户端发送了响应，但是由于网络故障未送到客户端。
无论哪种场景，在客户端看来都是一样的结果：它发出的请求没有得到响应。为了确保服务端成功写入数据，客户端只能重发请求，直至接收到服务端的响应。类似的问题问题被称为网络二将军问题。网络二将军问题的存在使得消息的发送者往往要重复发送消息，直到收到接收者的确认才认为发送成功，但这往往又会导致消息的重复发送。 例如电商系统中订单模块调用支付模块扣款的时候，如果网络故障导致二将军问题出现，扣款请求重复发送，产生的重复扣款结果显然是不能被接受的。因此要保证一次事务中的扣款请求无论被发送多少次，接收方有且只执行一次扣款动作，这种保证机制叫做接收方的幂等性

(2)BASE模型
BASE理论是对CAP的延伸和补充，是对CAP中的AP方案的一个补充，即使在选择AP方案的情况下，如何更好的最终达到 C

BASE 是基本可用（Basicly Available），柔性状态（Soft State），最终一致性（Eventually Consistency）三个短语的缩写，核心的思想是即使无法做到强一致性，但应用可以采用适合的方式达到最终一致性

BASE是指基本可用（Basically Available）、柔性状态（ Soft State）、最终一致性（ Eventual Consistency）。
1.基本可用（Basically Available）
基本可用是指分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用
电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务。这就是损失部分可用性的体现。

2.柔性状态（ Soft State）
柔性状态是指允许系统暂时存在中间状态，而该中间状态不会影响系统业务场景的可用。分布式存储中一般一份数据至少会有三个副本，允许不同节点间副本同步的延时就是软状态的体现。mysql replication的异步复制也是一种体现

3.最终一致性（ Eventual Consistency）
最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况

BASE模型的软状态是实现BASE理论的方法，基本可用和最终一致是目标

(3) 分布式数据带来的问题（比如分布式数据库或缓存）
数据服务的扩展手段：
1.数据分区：就是把不同的数据分片放到不同的服务器上（比如根据id%16或一致性哈希等）；
2.数据冗余：让所有服务器都有相同的数据，提供相当的服务；

对于第一种情况，如果每个数据分区的服务器只有一台的话，就会有单点问题，很容易造成分区数据丢失，导致服务不是高可用的。
数据服务的高可用只能通过第二种方式来完成，即数据的冗余存储（工业界认为比较安全的备份数是3份）。

综上，要解决数据不丢，只能通过数据冗余的方法，就算是数据分区，每个区也需要进行数据冗余处理。这就是数据副本：当出现某个节点的数据丢失时可以从副本读到，数据副本是分布式系统解决数据丢失异常的唯一手段。因此，分布式数据服务基本都是同时采取上面两种手段的，即先做数据分区，然后在每个数据通过数据镜像做冗余备份；

在上述分布式数据服务的场景下，如果要做一个跨服务器的事务处理，要保证跨服务器的数据一致性，就不是一件容易的事情了。
比如经典case：A帐号向B帐号汇钱
（1）在数据分区的方案中：如果A帐号和B帐号的数据不在同一台服务器上怎么办?在一个服务器上还可以通过本地事务来保证一致性，但不同服务器就是一个分布式事务问题了；
（2）在数据冗余的方案中：如果对A帐号的汇钱有两个并发操作（要汇给B和C），这两个操作发生在不同的两台服务器上怎么办？也就是说，在数据镜像中，在不同的服务器上对同一个数据的写操作怎么保证其一致性，保证数据不冲突？

数据一致性模型
数据一致性简单说有三种类型
1）Weak弱一致性：当你写入一个新值后，读操作在数据副本上可能读出来，也可能读不出来。比如：某些cache系统，网络游戏其它玩家的数据和你没什么关系，VOIP这样的系统，或是百度搜索引擎（呵呵）；
2）Eventually最终一致性：当你写入一个新值后，有可能读不出来，但在某个时间窗口之后保证最终能读出来。比如：DNS，电子邮件、Amazon S3，Google搜索引擎这样的系统；
3）Strong强一致性：新的数据一旦写入，在任意副本任意时刻都能读到新值。比如：文件系统，RDBMS，Azure Table都是强一致性的；
